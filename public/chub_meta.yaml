# All of these fields are optional, as is this file itself,
#   in which case these values can be managed in the UI.

# The name of the stage.
project_name: "Boss Mode"

# A short tagline to show in search.
tagline: "Take control with []s."

creator_notes: "Want to tell the LLM how to do its job? This stage takes your [bracketed instructions] or [[double-bracketed instructions]] and turns them into \"stage directions,\" which are higher-priority instructions that are not directly attributed to the user's input. 
Simply search for and add this stage to your chat from Chat Settings and you'll be able to leverage this feature in your input. 
<br>
<br>
There are multiple advantages to shifting these instructions into stage direction:
<ul>
<li>They are more likely to be honored by the LLM.
<li>They  are less likely to be mimicked by the LLM.
<li>You'll maintain cleaner input in your narrative.
<li>Stage directions fall out of context rather than continue to occupy chat history.
</ul>

[Single-bracketed instructions] will be treated as immediate instructions and will only apply to the following response (or swipes for that response).  
[[Double-bracketed instructions]] will be treated as long-term instructions that apply for multiple responses (10, by default--this can be configured on the stage in Chat Settings), or until new [[long-term instruction]] is provided. 
<br>
<br>
For example, if you write:
<br>
<br>
`I give {{char}} a friendly wave. [{{char}} ignores {{user}}'s wave.] [[{{char}} is always dismissive of {{user}}.]]`
<br>
<br>
then your input will appear as:
<br>
<br>
`I give {{char}} a friendly wave.`
<br>
<br>
and the LLM will also receive:
<br>
<br>
`### Ongoing Instruction: {{char}} is always dismissive of {{user}}.`
<br>
`### Critical Instruction: {{char}} should ignore {{user}}'s wave.`
<br>
<br>
at the end of the prompt, which should help the LLM better adhere to this instruction. The \"Ongoing Instruction\" will last for multiple responses or until you replace it with further [[long-term instruction]]. 
The stage supports multiple notes per input and also ignores brackets followed by parens, to avoid breaking markdown links.
<br>
<br>
This is an incredibly simple quality-of-life stage that I felt some folks might like to be able to drop into their chats. Let me know if you have any issues or suggestions. Thanks!
<br>
<br>
2025.04.05 - Added [[double brackets]] for long-term instruction.
"

# 'PUBLIC', 'PRIVATE', or 'UNLISTED'.
visibility: 'PUBLIC'

# 'ADJACENT' | 'NONE' | 'COVER' | 'FULLSCREEN'
# 'ADJACENT' is default. The frame will display on the side of the
#   chat on desktop and above/in the top half of the chat on mobile.
# 'NONE' will not display, only run.
# 'COVER' will, indeed, cover the chat history completely,
#   but leave the text input box.
# 'FULLSCREEN' will make nothing below the header bar
#   show except for your stage.
position: 'NONE'

# Self-explanatory.
tags:
 - 'Stage'
 - 'Add-on'
 - 'Utility'
 - 'Quality of Life'
 - 'SFW'

# The schema of any user-supplied config.
# If your stage requires a configuration but has no
#   defined schema, it won't work.
config_schema:
  type: object
  properties:
    longTermLife:
      title: "Long-Term Instruction Duration"
      description: "The number of subsequent responses that long-term instructions will persist."
      type: integer
      default: 10

# The schema of the state that you store.
# This isn't needed even if you do store state,
#   and is here more for future use cases to
#   optimize storage.
state_schema:
  init:
    type: object
    properties:
      grid:
        type: string
  message:
    type: object
    properties:
      angry:
        type: boolean
        default: true
  chat:
    type: object
    properties:
      visited:
        type: array
        items:
          type: integer

# Whether to publish as 'Anonymous' instead of under your username.
# is_anonymous: false

# Self-explanatory.
# ratings_disabled: false

# This is here for future cases where ex. you need user secrets,
#    but currently does nothing.
# permissions:

# extension_id is automatically generated on push with a new project;
#    you should not make or set this value.
# github_path will be added if it does not exist. It is the URL of the repo.



github_path: 'https://github.com/Lord-Raven/boss-mode'


extension_id: 'boss-mode-cfb0b7d36b1e'

